const { Telegraf, session, Markup } = require('telegraf');
const {Scenes} = require('telegraf');
require('dotenv').config();
const ADMIN1PASS = process.env.ADMIN1PASS;
const axios = require('axios');
const fs = require('fs');
const https = require('https');
const mongodb = require('mongodb');
const ObjectId = require('mongodb').ObjectID;
const mongoClient = new mongodb.MongoClient('MongoPass', {
                  useUnifiedTopology: true
});


class SceneGeneratorAdmin{
//=========================================================================

//=========================================================================
    Authentication(){
    const Aut = new Scenes.BaseScene('Aut');
    Aut.enter(async (ctx) => {await ctx.replyWithHTML(
`
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä ${ctx.update.message.from.first_name}
<i>–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –≤ –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</i>
`

)

//–∫–∞–∂–¥—É—é 5 –º–∏–Ω—É—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã
/*let Timeinterval = setInterval( () => {
  mongoClient.connect(async function(error, mongo) {
    if (!error) {
        try{
          let db = mongo.db('NurmotorsAutopart');// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
          let orders = db.collection('Orders');//–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ—É—Ü–∏–∏
          let colOrder = await orders.count({condition:"created"});//–ö–æ–ª-–≤–æ –æ—Ä–¥–µ—Ä–æ–≤
          if(colOrder > 0){
            await ctx.replyWithHTML(`–ü–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑! –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫ ${colOrder}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /SpareOrders`);
            console.log(`–ü–æ—è–≤–∏–ª—Å—è –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑!`);
          }

            }catch (err) {console.log(err);}
          }else {console.error(err);}
})
}, 600000);*/
});



Aut.on('text', async (ctx) => {
ctx.session.AdminPass = ctx.message.text;
if (ctx.session.AdminPass == ADMIN1PASS){
   await ctx.scene.enter('adminPanel');
} else {
    await ctx.replyWithHTML('–ö–æ–¥ –≤–≤–µ–¥–µ–Ω –Ω–µ –≤–µ—Ä–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    ctx.scene.reenter();
}
});

    return Aut
    }
//=========================================================================
//=========================================================================
    AdminPanel(){
    const adminPanel = new Scenes.BaseScene('adminPanel');
    adminPanel.enter(async (ctx) => {
        await ctx.replyWithHTML(`
<i>–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</i>, –ª–∏–±–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π
/orders - <b>–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫;</b>
/deferred - <b>–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π;</b>
/AddAutoPart - <b>–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∞–π—Ç;</b>
/DeleteAutoPart - <b>–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∞–π—Ç–µ;</b>
/ChangeAutoPart - <b>–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä–∞;</b>
/FindAProduct - <b>–ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É;</b>
/SpareOrders - <b>–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ;</b>
/SpareOrdersDeferred - <b>–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ;</b>
/memo - <b>–ü–æ–ª—É—á–∏—Ç—å –ø–∞–º—è—Ç–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –±—Ä–µ–Ω–¥–æ–≤</b>
`
        )

    });
//==============================================================================
      adminPanel.command('/orders', async (ctx) => {
//----------------------------------------------------------------------------------------------------------------------
            var connectMongoDB = function () {
                mongoClient.connect(async function(error, mongo) {
                  if (!error) {
                      try{
                   // console.log('connection is mongodb');
                        var db = mongo.db('TgNormotors');// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
                        var clients = db.collection('clients');//–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ—É—Ü–∏–∏
                        var colOrder = await clients.count({pedido:false});//–ö–æ–ª-–≤–æ –æ—Ä–¥–µ—Ä–æ–≤
                        if(colOrder != 0){
                        var OneOrders = await clients.findOne({pedido:false});//–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —ç–ª

                        var TextAdminOrder =
`
<i>–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: ${colOrder}</i>;

<i>id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</i> ${OneOrders._id};
<i>–î–∞—Ç–∞:</i> ${OneOrders.order[0].time};
<i>–ò–º—è:</i> ${OneOrders.order[0].name};
<i>–ò–º—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º:</i> ${OneOrders.name};
<i>–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏:</i> ${OneOrders.order[0].connection};
<i>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º:</i> ${OneOrders.TgName};

<b>–¢–µ–∫—Å—Ç:</b> ${OneOrders.order[0].text};
`

await ctx.replyWithHTML(TextAdminOrder,Markup.inlineKeyboard(
    [
      [Markup.button.callback('üî¥–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞','But1'),Markup.button.callback('üü¢–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç–∫—É','But2')],
      [Markup.button.callback('üü°–û—Ç–ª–æ–∂–∏—Ç—å -->','But3')]
    ]
  ));

} else {await ctx.replyWithHTML(`
–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç <b>–Ω–µ—Ç</b> –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.
<i>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É</i> /deferred.
`)
}
}catch (err) {console.log(err);}
                  } else {console.error(err);}
                });
                }
//----------------------------------------------------------------------------------------------------------------------
                  adminPanel.action('But1', async (ctx) => {
                    try{
                        await ctx.replyWithHTML('–û–ø–∏—à–∏—Ç–µ –æ—à–∏–±–∫—É –∑–∞–ø—Ä–æ—Å–∞: ')
                        adminPanel.on('text', async (ctx) => {
                        ctx.session.ErrorMes = ctx.message.text;
                        mongoClient.connect(async function(error, mongo) {
                            if (!error) {
                                var db2 = await mongo.db('TgNormotors');// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
                                var clients2 = await db2.collection('clients');//–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ—É—Ü–∏–∏
                                await clients2.updateOne({"pedido":false}, {"$set": {"order.0.AdminError": ctx.session.ErrorMes,"pedido":true,"order.0.status":"Error"}});
                                connectMongoDB();
                            }else {console.error(err);}
                        });
                        });
                    }catch (err) {console.log(err);}

                });
                adminPanel.action('But2', async (ctx) => {
                    try{
                        mongoClient.connect(async function(error, mongo) {
                            if (!error) {
                                var db3 = await mongo.db('TgNormotors');// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
                                var clients3 = await db3.collection('clients');//–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ—É—Ü–∏–∏
                                await clients3.updateOne({"pedido":false}, {"$set": {"order.0.status":"done","pedido":true}});
                                ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id)
                                connectMongoDB();
                            }else {console.error(err);}
                        });

                    }catch (err) {console.log(err);}
                });
                adminPanel.action('But3', async (ctx) => {
                    try{
                        mongoClient.connect(async function(error, mongo) {
                            if (!error) {
                                var db4 = await mongo.db('TgNormotors');// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
                                var clients4 = await db4.collection('clients');//–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ—É—Ü–∏–∏
                                await clients4.updateOne({"pedido":false}, {"$set": {"pedido":true,"order.0.status":"postponed"}});
                                ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id)
                                connectMongoDB();
                            }else {console.error(err);}
                        });

                    }catch (err) {console.log(err);}
                });
//----------------------------------------------------------------------------------------------------------------------
                connectMongoDB();
        });

        adminPanel.command('/deferred', async (ctx) => {
            var connectMongoDB2 = function () {
                mongoClient.connect(async function(error, mongo) {
                  if (!error) {
                      try{
                        var db = mongo.db('TgNormotors');// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
                        var clients = db.collection('clients');//–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ—É—Ü–∏–∏
                        var colOrder = await clients.count({"order.0.status":"postponed"});//–ö–æ–ª-–≤–æ –æ—Ä–¥–µ—Ä–æ–≤
                        if(colOrder != 0){
                        var OneOrders = await clients.findOne({"order.0.status":"postponed"});//–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —ç–ª

                        var TextAdminOrder =
`
<i>–û—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: ${colOrder}</i>;

<i>id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</i> ${OneOrders._id};
<i>–î–∞—Ç–∞:</i> ${OneOrders.order[0].time};
<i>–ò–º—è:</i> ${OneOrders.order[0].name};
<i>–ò–º—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º:</i> ${OneOrders.name};
<i>–°–ø–æ—Å–æ–± —Å–≤—è–∑–∏:</i> ${OneOrders.order[0].connection};
<i>–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º:</i> ${OneOrders.TgName};

<b>–¢–µ–∫—Å—Ç:</b> ${OneOrders.order[0].text};
`

await ctx.replyWithHTML(TextAdminOrder,Markup.inlineKeyboard(
    [
      [Markup.button.callback('üî¥–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞','But4'),Markup.button.callback('üü¢–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç–∫—É','But5')],
      [Markup.button.callback('üü°–û—Ç–ª–æ–∂–∏—Ç—å -->','But6')]
    ]
  ));
                        } else {await ctx.replyWithHTML(`
–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç <b>–Ω–µ—Ç</b> –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.
`)}
}catch (err) {console.log(err);}
                  } else {console.error(err);}
                });
                }
                adminPanel.action('But4', async (ctx) => {
                    try{
                        await ctx.replyWithHTML('–û–ø–∏—à–∏—Ç–µ –æ—à–∏–±–∫—É –∑–∞–ø—Ä–æ—Å–∞: ')
                        adminPanel.on('text', async (ctx) => {
                        ctx.session.ErrorMes = ctx.message.text;
                        mongoClient.connect(async function(error, mongo) {
                            if (!error) {
                                var db2 = await mongo.db('TgNormotors');// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
                                var clients2 = await db2.collection('clients');//–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ—É—Ü–∏–∏
                                await clients2.updateOne({"order.0.status":"postponed"}, {"$set": {"order.0.AdminError": ctx.session.ErrorMes,"pedido":true,"order.0.status":"Error"}});
                                connectMongoDB2();
                            }else {console.error(err);}
                        });
                        });
                    }catch (err) {console.log(err);}

                });
                adminPanel.action('But5', async (ctx) => {
                    try{
                        mongoClient.connect(async function(error, mongo) {
                            if (!error) {
                                var db3 = await mongo.db('TgNormotors');// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
                                var clients3 = await db3.collection('clients');//–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ—É—Ü–∏–∏
                                await clients3.updateOne({"order.0.status":"postponed"}, {"$set": {"order.0.status":"done","pedido":true}});
                                ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id)
                                connectMongoDB2();
                            }else {console.error(err);}
                        });

                    }catch (err) {console.log(err);}
                });
                adminPanel.action('But6', async (ctx) => {
                    try{
                        mongoClient.connect(async function(error, mongo) {
                            if (!error) {
                                var db4 = await mongo.db('TgNormotors');// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
                                var clients4 = await db4.collection('clients');//–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ—É—Ü–∏–∏
                                await clients4.updateOne({"order.0.status":"postponed"}, {"$set": {"pedido":true,"order.0.status":"postponed"}});
                                ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id)
                                connectMongoDB2();
                            }else {console.error(err);}
                        });

                    }catch (err) {console.log(err);}
                });
                connectMongoDB2();
        })

//===================================================================================================
adminPanel.command('/AddAutoPart', async (ctx) => {

await ctx.scene.enter('AutoPart');

});
//===================================================================================================
adminPanel.command('/DeleteAutoPart', async (ctx) => {
await ctx.scene.enter('DeletePart');
});
//===================================================================================================
adminPanel.command('/ChangeAutoPart', async (ctx) => {
await ctx.scene.enter('ChangePart');
});
//==================================================================================================
adminPanel.command('/FindAProduct', async (ctx) => {
await ctx.scene.enter('FindProduct');
});
//==================================================================================================
adminPanel.command('/memo', async (ctx) => {
  try{
    ctx.telegram.sendDocument(ctx.from.id, {
      source: './Memo.txt',
      filename: 'Memo.txt'
  });
   }catch (err) {console.log(err);}
});
//==================================================================================================
adminPanel.command('/SpareOrders', async (ctx) => {
  var connectMongoDB3 = function () {
      mongoClient.connect(async function(error, mongo) {
        if (!error) {
            try{
              var db = mongo.db('NurmotorsAutopart');// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
              var Orders = db.collection('Orders');//–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ—É—Ü–∏–∏
              var autoPartsChara = db.collection('autoPartsChara');
              var colOrders = await Orders.count({condition:'created'});//–ö–æ–ª-–≤–æ –æ—Ä–¥–µ—Ä–æ–≤
              if(colOrders != 0){
              var OneOrders = await Orders.findOne({condition:'created'});//–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —ç–ª
              var orderId = OneOrders.order;// –ø–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ id
              var arr = [];
              //–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ id
              for (var i = 0; i < orderId.length; i++) {
                let OneOrderIdsplit = await autoPartsChara.findOne({"_id" : {"$in" : [ObjectId(orderId[i])]}});
                let str =  OneOrderIdsplit.nameTitle +'|'+OneOrderIdsplit.Article+'|'+OneOrderIdsplit.markAuto+'/'+OneOrderIdsplit.modelAuto+'|'+OneOrderIdsplit.price;
                arr.push(str);
              }
              //–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ç–æ–≤–∞—Ä–∞
                var StrInnerHTML = '';
              for (var i = 0; i < arr.length; i++) {
                let arrSplit = arr[i].split('|');
                let arrOrderNum = OneOrders.orderNum.split(',');
                let div =`
------------------------
–¢–æ–≤–∞—Ä ‚Ññ${i+1}
–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: ${arrSplit[0]}
–ê—Ä—Ç–∏–∫—É–ª: ${arrSplit[1]}
–ú–∞—Ä–∫–∞/–ú–æ–¥–µ–ª—å: ${arrSplit[2]}
–ö–æ–ª-–≤–æ: ${arrOrderNum[i]}
–¶–µ–Ω–∞ –∑–∞ —à—Ç: ${arrSplit[3]}
------------------------
`;
                StrInnerHTML = StrInnerHTML + div;
              }
                StrInnerHTML = StrInnerHTML + OneOrders.orderTotalPrice;

              var TextAdminOrder =
  `
  <i>–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: ${colOrders}</i>;

  <i>–ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞:</i> ${OneOrders.Name};
  <i>–°–≤—è–∑—å:</i> ${OneOrders.communication};
  <i>–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:</i> ${OneOrders.date};
  <i>–¢–æ–≤–∞—Ä—ã:</i> ${StrInnerHTML};

  <b>–¢–µ–∫—Å—Ç:</b> ${OneOrders.text};
  `
//–°—Ç—Ä–æ–∫–∞ –¥–ª—è —á–µ–∫–∞
ctx.session.TextAdminOrder =
`
  –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: ${colOrders};

  –ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞: ${OneOrders.Name};
  –°–≤—è–∑—å: ${OneOrders.communication};
  –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: ${OneOrders.date};
  –¢–æ–≤–∞—Ä—ã: ${StrInnerHTML};

  –¢–µ–∫—Å—Ç: ${OneOrders.text};

`;

  await ctx.replyWithHTML(TextAdminOrder,Markup.inlineKeyboard(
  [
  [Markup.button.callback('üü¢–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç–∫—É','But12'),Markup.button.callback('üü°–û—Ç–ª–æ–∂–∏—Ç—å -->','But13')],
  [Markup.button.callback('üìÑ–í—ã–¥–∞—Ç—å —á–µ–∫','But14')]
  ]
  ));
  ctx.session.idOrders = OneOrders._id;
  } else {await ctx.replyWithHTML(`
–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç <b>–Ω–µ—Ç</b> –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.
<i>–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É</i> /SpareOrdersDeferred
  `)
  }
  }catch (err) {console.log(err);}
        } else {console.error(err);}

      });

      }
  //----------------------------------------------------------------------------------------------------------------------
        adminPanel.action('But12', async (ctx) => {
          try{
            mongoClient.connect(async function(error, mongo) {
                if (!error) {
                  let db2 = mongo.db('NurmotorsAutopart');// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
                  let Orders2 = db2.collection('Orders');//–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ—É—Ü–∏–∏
                    await Orders2.updateOne({_id:ctx.session.idOrders}, {"$set": {"condition":"done"}});
                    ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id)
                    connectMongoDB3();
                }else {console.error(err);}
            });
          }catch (err) {console.log(err);}

      });
      adminPanel.action('But13', async (ctx) => {
          try{
            mongoClient.connect(async function(error, mongo) {
                if (!error) {
                  let db3 = mongo.db('NurmotorsAutopart');// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
                  let Orders3 = db3.collection('Orders');//–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ—É—Ü–∏–∏
                    await Orders3.updateOne({_id:ctx.session.idOrders}, {"$set": {"condition":"postponed"}});
                    ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id)
                    connectMongoDB3();
                }else {console.error(err);}
            });
          }catch (err) {console.log(err);}
      });
      adminPanel.action('But14', async (ctx) => {
        try{
          fs.writeFile('./cheque/cheque.txt', ctx.session.TextAdminOrder, function(err) {
          	if (err) {
          		console.log('–æ—à–∏–±–∫–∞');
          	}
          });
          ctx.telegram.sendDocument(ctx.from.id, {
            source: './cheque/cheque.txt',
            filename: 'cheque.txt'
  });
         }catch (err) {console.log(err);}
      });
  //----------------------------------------------------------------------------------------------------------------------
      connectMongoDB3();
});
//==================================================================================================
adminPanel.command('/SpareOrdersDeferred', async (ctx) => {
  var connectMongoDB4 = function () {
      mongoClient.connect(async function(error, mongo) {
        if (!error) {
            try{
              var db4 = mongo.db('NurmotorsAutopart');// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
              var Orders4 = db4.collection('Orders');//–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ—É—Ü–∏–∏
              var autoPartsChara = db4.collection('autoPartsChara');
              var colOrders = await Orders4.count({condition:"postponed"});//–ö–æ–ª-–≤–æ –æ—Ä–¥–µ—Ä–æ–≤
              if(colOrders != 0){
              var OneOrders = await Orders4.findOne({condition:"postponed"});//–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —ç–ª
              var orderId = OneOrders.order;// –ø–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ id
              console.log(orderId);
              var arr = [];
              //–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ id
              for (var i = 0; i < orderId.length; i++) {
                let OneOrderIdsplit = await autoPartsChara.findOne({"_id" : {"$in" : [ObjectId(orderId[i])]}});
                let str = await OneOrderIdsplit.nameTitle +'|'+OneOrderIdsplit.Article+'|'+OneOrderIdsplit.markAuto+'/'+OneOrderIdsplit.modelAuto+'|'+OneOrderIdsplit.price;
                arr.push(str);
              }
              //–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Ç–æ–≤–∞—Ä–∞
                var StrInnerHTML = '';
              for (var i = 0; i < arr.length; i++) {
                let arrSplit = arr[i].split('|');
                let arrOrderNum = OneOrders.orderNum.split(',');
                let div =`
------------------------
–¢–æ–≤–∞—Ä ‚Ññ${i+1}
–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: ${arrSplit[0]}
–ê—Ä—Ç–∏–∫—É–ª: ${arrSplit[1]}
–ú–∞—Ä–∫–∞/–ú–æ–¥–µ–ª—å: ${arrSplit[2]}
–ö–æ–ª-–≤–æ: ${arrOrderNum[i]}
–¶–µ–Ω–∞ –∑–∞ —à—Ç: ${arrSplit[3]}
------------------------
`;
                StrInnerHTML = StrInnerHTML + div;
              }
                StrInnerHTML = StrInnerHTML + OneOrders.orderTotalPrice;

              var TextAdminOrder =
  `
  <i>–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: ${colOrders}</i>;

  <i>–ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞:</i> ${OneOrders.Name};
  <i>–°–≤—è–∑—å:</i> ${OneOrders.communication};
  <i>–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:</i> ${OneOrders.date};
  <i>–¢–æ–≤–∞—Ä—ã:</i> ${StrInnerHTML}

  <b>–¢–µ–∫—Å—Ç:</b> ${OneOrders.text};
  `

  ctx.session.TextAdminOrder =
  `
    –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: ${colOrders};

    –ò–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞: ${OneOrders.Name};
    –°–≤—è–∑—å: ${OneOrders.communication};
    –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: ${OneOrders.date};
    –¢–æ–≤–∞—Ä—ã: ${StrInnerHTML};

    –¢–µ–∫—Å—Ç: ${OneOrders.text};

  `;

  await ctx.replyWithHTML(TextAdminOrder,Markup.inlineKeyboard(
  [
  [Markup.button.callback('üü¢–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç–∫—É','But15'),Markup.button.callback('üü°–û—Ç–ª–æ–∂–∏—Ç—å -->','But16')],
  [Markup.button.callback('üìÑ–í—ã–¥–∞—Ç—å —á–µ–∫','But17')]
  ]
  ));
  ctx.session.idOrders = OneOrders._id;
  } else {await ctx.replyWithHTML(`
–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç <b>–Ω–µ—Ç</b> –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.
<i>–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π</i> /SpareOrders
  `)
  }
  }catch (err) {console.log(err);}
        } else {console.error(err);}

      });

      }
  //----------------------------------------------------------------------------------------------------------------------
        adminPanel.action('But15', async (ctx) => {
          try{
            mongoClient.connect(async function(error, mongo) {
                if (!error) {
                  let db5 = mongo.db('NurmotorsAutopart');// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
                  let Orders5 = db5.collection('Orders');//–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ—É—Ü–∏–∏
                    await Orders5.updateOne({_id:ctx.session.idOrders}, {"$set": {"condition":"done"}});
                    ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id);
                    connectMongoDB4();
                }else {console.error(err);}
            });
          }catch (err) {console.log(err);}

      });
      adminPanel.action('But16', async (ctx) => {
          try{
            mongoClient.connect(async function(error, mongo) {
                if (!error) {
                  let db6 = mongo.db('NurmotorsAutopart');// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
                  let Orders6 = db6.collection('Orders');//–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ—É—Ü–∏–∏
                    await Orders6.updateOne({_id:ctx.session.idOrders}, {"$set": {"condition":"postponed"}});
                    ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id);
                    connectMongoDB4();
                }else {console.error(err);}
            });
          }catch (err) {console.log(err);}
      });

      adminPanel.action('But17', async (ctx) => {
        try{
          fs.writeFile('./cheque/cheque.txt', ctx.session.TextAdminOrder, function(err) {
          	if (err) {
          		console.log('–æ—à–∏–±–∫–∞');
          	}
          });
          ctx.telegram.sendDocument(ctx.from.id, {
     source: './cheque/cheque.txt',
     filename: 'cheque.txt'
  })
         }catch (err) {console.log(err);}
      });

  //----------------------------------------------------------------------------------------------------------------------
      connectMongoDB4();
});
//==================================================================================================

        adminPanel.command('/help', async (ctx) => {
            await ctx.replyWithHTML(`
<i>–û–∂–∏–¥–∞–π—Ç–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</i>, –ª–∏–±–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π
/orders - <b>–ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫;</b>
/deferred - <b>–ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π;</b>
/AddAutoPart - <b>–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∞–π—Ç;</b>
/DeleteAutoPart - <b>–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –Ω–∞ —Å–∞–π—Ç–µ;</b>
/ChangeAutoPart - <b>–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä–∞;</b>
/FindAProduct - <b>–ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É;</b>
/SpareOrders - <b>–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ;</b>
/SpareOrdersDeferred - <b>–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–∞ —Å–∞–π—Ç–µ;</b>
`
                )
        });

    return adminPanel
    }
AddAutoPart(){
  const AutoPart = new Scenes.BaseScene('AutoPart');
  try{
   AutoPart.enter(async (ctx) => {
  await ctx.replyWithHTML(
`
–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–ø—á–∞—Å—Ç–∏, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ
—Ä–∞–∑–¥–µ–ª—è—è –∏—Ö —Å–∏–º–≤–æ–ª–æ–º "|"

<b>(–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ|*–¢–∏–ø|–ê—Ä—Ç–∏–∫—É–ª|–ú–∞—Ä–∫–∞–ê–≤—Ç–æ|–ú–æ–¥–µ–ª—å–ê–≤—Ç–æ|–¶–µ–Ω–∞|–û–ø–∏—Å–∞–Ω–∏–µ|*–ö–∞—Ç–µ–≥–æ—Ä–∏—è|–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è)</b>

<i>*–¢–∏–ø -</i> –ö–æ—Ä–æ—Ç–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ "–°–≤–µ—á–∞ –∑–∞–∂–∏–≥–∞–Ω–∏—è NGK 2669" –±—É–¥–µ—Ç –∏–º–µ—Ç—å —Ç–∏–ø "–°–≤–µ—á–∞ –∑–∞–∂–∏–≥–∞–Ω–∏—è"
*–ö–∞—Ç–µ–≥–æ—Ä–∏—è - –ü–æ–¥—Ä–∞–∑–¥–µ–ª—è–µ—Ç—Å—è –Ω–∞: –î–≤–∏–≥–∞—Ç–µ–ª—å, –ü–æ–¥–≤–µ—Å–∫–∞, –¢–æ—Ä–º–æ–∑–∞, –í—ã—Ö–ª–æ–ø, –ö–æ—Ä–æ–±–∫–∞ –ø–µ—Ä–µ–¥–∞—á, –ñ–∏–¥–∫–æ—Å—Ç–∏, –≠–ª–µ–∫—Ç—Ä–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, –≠–∫—Å—Ç–µ—Ä—å–µ—Ä.

–≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –ø–æ—Ä—è–¥–∫—É <i>–∏—Å–ø–æ–ª—å–∑—É—è "|" –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å.</i>

<b>–ü—Ä–∏–º–µ—Ä: –°–≤–µ—á–∞ –∑–∞–∂–∏–≥–∞–Ω–∏—è NGK 2669|–°–≤–µ—á–∞ –∑–∞–∂–∏–≥–∞–Ω–∏—è|BKR9EIX|Audi|A7|688.00|–°–≤–µ—á–∞ –∑–∞–∂–∏–≥–∞–Ω–∏—è NGK 2669 BKR9EIX –Ω–æ–≤–∞—è|–≠–ª–µ–∫—Ç—Ä–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ|–Ø–ø–æ–Ω–∏—è</b>

–ü–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!
`
)
});
AutoPart.on('text', async (ctx) => {
ctx.session.AddAutoPart = await (ctx.message.text).split('|');
if((ctx.session.AddAutoPart).length == 9){
  await ctx.replyWithHTML(
  `
  –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∑–∞–ø—á–∞—Å—Ç–∏ —Å <i>—Ä–µ–∂–∏–º–æ–º —Å–∂–∞—Ç–∏—è</i> –≤ —Ñ–æ—Ä–º–∞—Ç–µ <i>png</i> –∏–ª–∏ <i>jpg</i>.
  `
  )
} else {
  ctx.telegram.deleteMessage(ctx.chat.id,ctx.message.message_id-1);
  await ctx.replyWithHTML(
`<b>–î–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ –ª–∏ –ø—É–Ω–∫—Ç—ã –±—ã–ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!</b>`
  )
  ctx.scene.reenter();
}


});

AutoPart.on('message', async (ctx) => {
  try{
const files = ctx.update.message.photo;
console.log(files);
try{var fileId = await files[2].file_id;} catch (err) {
try{var fileId = await files[1].file_id;}catch (err) {
  var fileId = await files[0].file_id;
}

}

let res = await axios.get(`https://api.telegram.org/bot5115089738:AAEisdocA0J2kouJ9OErJAASxhRwzugazf8/getFile?file_id=${fileId}`).then(token => { return token } )
let file_path = await res.data.result.file_path;

ctx.session.ResFile_unique_id = res.data.result.file_unique_id;

var file = await fs.createWriteStream("../Diplom/public/img/details/"+res.data.result.file_unique_id + ".jpg");
var request = await https.get(`https://api.telegram.org/file/bot5115089738:AAEisdocA0J2kouJ9OErJAASxhRwzugazf8/${file_path}`, function(response) {
 response.pipe(file);});

   async function getNewAutoPart() {
   await ctx.replyWithPhoto({ source:"../Diplom/public/img/details/"+res.data.result.file_unique_id + ".jpg"},{ caption:
`
<i>–î–∞–Ω–Ω—ã–µ:</i>
<b>nameTitle:</b> ${ctx.session.AddAutoPart[0].trim()}
<b>type:</b> ${ctx.session.AddAutoPart[1].trim()}
<b>Article:</b> ${ctx.session.AddAutoPart[2].trim()}
<b>markAuto:</b> ${ctx.session.AddAutoPart[3].trim()}
<b>modelAuto:</b> ${ctx.session.AddAutoPart[4].trim()}
<b>price:</b> ${ctx.session.AddAutoPart[5].trim()}
<b>description:</b> ${ctx.session.AddAutoPart[6].trim()}
<b>category:</b> ${ctx.session.AddAutoPart[7].trim()}
<b>manufacturer:</b>${ctx.session.AddAutoPart[8].trim()}
`,parse_mode: 'HTML' }
);

await ctx.replyWithHTML(
`
–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–ø—á–∞—Å—Ç—å?
`,Markup.inlineKeyboard(
     [
       [Markup.button.callback('üî¥–û—Ç–º–µ–Ω–∏—Ç—å','But7'),Markup.button.callback('üü¢–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å','But8')],
       [Markup.button.callback('üü°–ò—Å–ø—Ä–∞–≤–∏—Ç—å','But9')]
     ]
   )
)

   }
   setTimeout(getNewAutoPart, 1500);

}catch (err) {console.log(err);}
});

AutoPart.action('But7', async (ctx) => {
    try{
      ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id);
      ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id - 1);
      ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id - 2);
      ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id - 3);
      ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id - 4);
      ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id - 5);
        fs.unlinkSync("../Diplom/public/img/details/"+ctx.session.ResFile_unique_id + ".jpg");
        await ctx.scene.enter('adminPanel');
    }catch (err) {console.log(err);}
});

AutoPart.action('But8', async (ctx) => {
    try{
//========================================================================================================
      mongoClient.connect(async function(error, mongo) {
        if (!error) {
            try{
              var db = mongo.db('NurmotorsAutopart');// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
              var autoPartsChara = db.collection('autoPartsChara');//–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ—É—Ü–∏–∏
              var autopart = db.collection('autopart');
              var checkMarkAuto = await autopart.findOne({brandAuto: (ctx.session.AddAutoPart[3].trim()).charAt(0).toUpperCase() + ctx.session.AddAutoPart[3].trim().slice(1)});
          //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
              if (checkMarkAuto == null) {
            await ctx.replyWithHTML('<i>–¢–∞–∫–æ–π –º–∞—Ä–∫–∏ –Ω–µ—Ç –≤ –∫–∞—Ç–∞–ª–æ–≥–µ!</i> –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–µ–±–º–∞—Å—Ç–µ—Ä—É.');
            fs.unlinkSync("../Diplom/public/img/details/"+ctx.session.ResFile_unique_id + ".jpg");
              await ctx.scene.enter('adminPanel');
              //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
            } else {
                  //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
              let NewAutopart = {
                nameTitle:ctx.session.AddAutoPart[0].trim(),
                type:ctx.session.AddAutoPart[1].trim(),
                Article:ctx.session.AddAutoPart[2].trim(),
                image:"../Diplom/public/img/details/"+ctx.session.ResFile_unique_id + ".jpg",
                markAuto:ctx.session.AddAutoPart[3].trim(),
                modelAuto:ctx.session.AddAutoPart[4].trim(),
                price:Number(ctx.session.AddAutoPart[5].trim()),
                description:ctx.session.AddAutoPart[6].trim(),
                category:ctx.session.AddAutoPart[7].trim(),
                manufacturer:ctx.session.AddAutoPart[8].trim()
              }
              await autoPartsChara.insertOne(NewAutopart);
              //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
              var GetNewAutopart = await autoPartsChara.findOne({nameTitle:ctx.session.AddAutoPart[0].trim(),type:ctx.session.AddAutoPart[1].trim(),Article:ctx.session.AddAutoPart[2].trim(),markAuto:ctx.session.AddAutoPart[3].trim(),
              modelAuto:ctx.session.AddAutoPart[4].trim(),price:Number(ctx.session.AddAutoPart[5].trim()),description:ctx.session.AddAutoPart[6].trim(),category:ctx.session.AddAutoPart[7].trim(),manufacturer:ctx.session.AddAutoPart[8].trim()});

              var IDGetNewAutopart = await GetNewAutopart._id;
            var IDcheckMarkAuto = await checkMarkAuto._id;
            var BoolMarkAuto = await false;
            for (var i = 0; i < checkMarkAuto.modelAuto.length; i++) {
              if(checkMarkAuto.modelAuto[i].Model == ctx.session.AddAutoPart[4].trim()){
                BoolMarkAuto = await true;
                break;
              }
            }
            //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
          if (BoolMarkAuto == false) {
             autopart.updateOne({_id : IDcheckMarkAuto}, {$addToSet: {modelAuto:{Model:ctx.session.AddAutoPart[4].trim(),AutoParts:[IDGetNewAutopart]}}});
             await ctx.replyWithHTML('<b>–ó–∞–ø—á–∞—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>');
             ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id);
             ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id - 1);
             ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id - 2);
             ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id - 3);
             ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id - 4);
             ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id - 5);
             await ctx.scene.enter('adminPanel');
          } else if (BoolMarkAuto == true) {
             checkMarkAuto = await autopart.findOne({brandAuto: (ctx.session.AddAutoPart[3].trim()).charAt(0).toUpperCase() + ctx.session.AddAutoPart[3].trim().slice(1)});
             db.collection('autopart').updateOne({"modelAuto.Model" : ctx.session.AddAutoPart[4].trim()}, {"$push" : {"modelAuto.$.AutoParts" : IDGetNewAutopart}})
             await ctx.replyWithHTML('<b>–ó–∞–ø—á–∞—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>');
             ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id);
             ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id - 1);
             ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id - 2);
             ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id - 3);
             ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id - 4);
             ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id - 5);
             await ctx.scene.enter('adminPanel');
          }
              //--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
            }
          }catch (err) {console.log(err);}
              } else {console.error(err);}
            });
//========================================================================================================
    }catch (err) {console.log(err);}
});

AutoPart.action('But9', async (ctx) => {
    try{
      ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id);
      ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id - 1);
      ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id - 2);
      ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id - 3);
      fs.unlinkSync("../Diplom/public/img/details/"+ctx.session.ResFile_unique_id + ".jpg");
        ctx.scene.reenter();
    }catch (err) {console.log(err);}
});

}catch (err) {console.log(err);}


      return AutoPart
}

//=========================================================================
//=========================================================================
DeleteAutoPart(){
  const DeletePart = new Scenes.BaseScene('DeletePart');
  try{
    DeletePart.enter(async (ctx) => {
    await ctx.replyWithHTML(
    `
    <i>–í–≤–µ–¥–∏—Ç–µ:</i>
    <b>(–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ|–ú–∞—Ä–∫–∞–ê–≤—Ç–æ|–ú–æ–¥–µ–ª—å–ê–≤—Ç–æ)</b>
    <b>–ü—Ä–∏–º–µ—Ä: –°–≤–µ—á–∞ –∑–∞–∂–∏–≥–∞–Ω–∏—è NGK 2669|Audi|A7</b>
    –õ–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ –û—Ç–º–µ–Ω–∞.
    `,Markup.keyboard(['–û—Ç–º–µ–Ω–∞']).oneTime().resize());
    });

      DeletePart.on('text', async (ctx) => {
        ctx.session.DelAutoPart = await (ctx.message.text).split('|');
        console.log(ctx.session.DelAutoPart);
        if((ctx.message.text).toUpperCase() == "–û–¢–ú–ï–ù–ê") {
        ctx.replyWithHTML('–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',Markup.removeKeyboard(true))
        await ctx.scene.enter('adminPanel');
      } else {
        if((ctx.session.DelAutoPart).length == 3){
        mongoClient.connect(async function(error, mongo) {
          if (!error) {
              var db = mongo.db('NurmotorsAutopart');// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
              var autoPartsChara = db.collection('autoPartsChara');//–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ—É—Ü–∏–∏
              var autopart = db.collection('autopart');
              var checkAutoPartsChara = await autoPartsChara.findOne({nameTitle:ctx.session.DelAutoPart[0].trim() ,
                markAuto:ctx.session.DelAutoPart[1].trim(),
                modelAuto:ctx.session.DelAutoPart[2].trim()});
                if(checkAutoPartsChara == null){
                    await ctx.replyWithHTML('–¢–∞–∫–æ–π –∑–∞–ø—á–∞—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!',Markup.removeKeyboard(true));
                    ctx.scene.reenter();
                } else{
                //-----------------------------------------------------------------------------------------
                  async function getAutoPart() {
                  await ctx.replyWithPhoto({ source:checkAutoPartsChara.image},{ caption:
`
<i>–î–∞–Ω–Ω—ã–µ:</i>
<b>nameTitle:</b> ${checkAutoPartsChara.nameTitle}
<b>type:</b> ${checkAutoPartsChara.type}
<b>Article:</b> ${checkAutoPartsChara.Article}
<b>markAuto:</b> ${checkAutoPartsChara.Audi}
<b>modelAuto:</b> ${checkAutoPartsChara.modelAuto}
<b>price:</b> ${checkAutoPartsChara.price}
<b>description:</b> ${checkAutoPartsChara.description}
<b>category:</b> ${checkAutoPartsChara.category}
`,parse_mode: 'HTML' });

               await ctx.replyWithHTML(
               `
               –£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø—á–∞—Å—Ç—å?
               `,Markup.inlineKeyboard(
                    [
                      [Markup.button.callback('üî¥–û—Ç–º–µ–Ω–∏—Ç—å','But10'),Markup.button.callback('üü¢–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å','But11')]
                    ]
                  )
               )

                  }
                  setTimeout(getAutoPart, 1500);

                }
                //-----------------------------------------------------------------------------------------
        }else {console.error(err)}
      });

      }else {
        await ctx.replyWithHTML(`–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!`,Markup.removeKeyboard(true));
        ctx.scene.reenter();
      }
      }
      });

      DeletePart.action('But10', async (ctx) => {
          try{
            ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id);
            ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id - 1);
            ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id - 2);
            await ctx.replyWithHTML('–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!',Markup.removeKeyboard(true));
              await ctx.scene.enter('adminPanel');
          }catch (err) {console.log(err);}
      });
      DeletePart.action('But11', async (ctx) => {
          try{
            ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id);
            ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id - 1);
            ctx.telegram.deleteMessage(ctx.chat.id,ctx.update.callback_query.message.message_id - 2);

            mongoClient.connect(async function(error, mongo) {
              if (!error) {
                  var db = mongo.db('NurmotorsAutopart');// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
                  var autoPartsChara = db.collection('autoPartsChara');//–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ—É—Ü–∏–∏
                  var autopart = db.collection('autopart');
                  var checkAutoPartsChara = await autoPartsChara.findOne({nameTitle:ctx.session.DelAutoPart[0].trim() ,
                    markAuto:ctx.session.DelAutoPart[1].trim(),
                    modelAuto:ctx.session.DelAutoPart[2].trim()});
                    if(checkAutoPartsChara == null){
                        await ctx.replyWithHTML('–¢–∞–∫–æ–π –¥–µ—Ç–∞–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                        ctx.scene.reenter();
                    } else{
                    let IdCheckAutoPartsChara = checkAutoPartsChara._id;
                    fs.unlinkSync(checkAutoPartsChara.image);
                    await autoPartsChara.deleteOne({nameTitle: ctx.session.DelAutoPart[0].trim(),
                      markAuto:ctx.session.DelAutoPart[1].trim(),
                      modelAuto:ctx.session.DelAutoPart[2].trim()});
                       db.collection('autopart').updateOne({brandAuto:ctx.session.DelAutoPart[1].trim(),"modelAuto.Model" : ctx.session.DelAutoPart[2].trim()}, {"$pull" : {"modelAuto.$.AutoParts" : IdCheckAutoPartsChara}});
                       await ctx.replyWithHTML('–¢–æ–≤–∞—Ä <b>—É—Å–ø–µ—à–Ω–æ</b> —É–¥–∞–ª–µ–Ω!',Markup.removeKeyboard(true));
                       await ctx.scene.enter('adminPanel');
                    }

            }else {console.error(err)}
          });
          }catch (err) {console.log(err);}
      });

  } catch (err) {console.log(err);}

return DeletePart
}
//=========================================================================
//=========================================================================
–°hangeAutoPart(){
  const ChangePart = new Scenes.BaseScene('ChangePart');
  try{
    ChangePart.enter(async (ctx) => {
    await ctx.replyWithHTML(
    `
    <i>–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ –≤–≤–µ–¥–∏—Ç–µ:</i>
    <b>(–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ|–ú–∞—Ä–∫–∞–ê–≤—Ç–æ|–ú–æ–¥–µ–ª—å–ê–≤—Ç–æ)</b>
    <b>–ü—Ä–∏–º–µ—Ä: –°–≤–µ—á–∞ –∑–∞–∂–∏–≥–∞–Ω–∏—è NGK 2669|Audi|A7</b>
    –õ–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>.
    `,Markup.keyboard(['–û—Ç–º–µ–Ω–∞']).oneTime().resize());
  });

    ChangePart.on('text', async (ctx) => {
      ctx.session.–°hangeAutoPart = await (ctx.message.text).split('|');
      if((ctx.message.text).toUpperCase() == "–û–¢–ú–ï–ù–ê") {
      ctx.replyWithHTML('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',Markup.removeKeyboard(true))
      await ctx.scene.enter('adminPanel');
    } else {
      if((ctx.session.–°hangeAutoPart).length == 3){
        mongoClient.connect(async function(error, mongo) {
          if (!error) {
              var db = mongo.db('NurmotorsAutopart');// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
              var autoPartsChara = db.collection('autoPartsChara');//–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ—É—Ü–∏–∏
              var autopart = db.collection('autopart');
              var checkAutoPartsChara = await autoPartsChara.findOne({nameTitle:ctx.session.–°hangeAutoPart[0].trim() ,
                markAuto:ctx.session.–°hangeAutoPart[1].trim(),
                modelAuto:ctx.session.–°hangeAutoPart[2].trim()});
                if(checkAutoPartsChara == null){
                    await ctx.replyWithHTML('–¢–∞–∫–æ–π –∑–∞–ø—á–∞—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
                    ctx.scene.reenter();
                } else{
                //-----------------------------------------------------------------------------------------
                  async function getAutoPart() {
                  await ctx.replyWithPhoto({ source:checkAutoPartsChara.image},{ caption:
`
<i>–î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∑–∞–ø—á–∞—Ç–∏:</i>
<b>nameTitle:</b> ${checkAutoPartsChara.nameTitle}
<b>type:</b> ${checkAutoPartsChara.type}
<b>Article:</b> ${checkAutoPartsChara.Article}
<b>markAuto:</b> ${checkAutoPartsChara.markAuto}
<b>modelAuto:</b> ${checkAutoPartsChara.modelAuto}
<b>price:</b> ${checkAutoPartsChara.price}
<b>description:</b> ${checkAutoPartsChara.description}
<b>category:</b> ${checkAutoPartsChara.category}
`,parse_mode: 'HTML' });

               await ctx.replyWithHTML('–ß—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å?',Markup.keyboard([['nameTitle','type','Article'],['markAuto','modelAuto','price'],['description','image','category'],['–û—Ç–º–µ–Ω–∞']]).oneTime().resize());
                  }
                  setTimeout(getAutoPart, 1000);
                  await ctx.scene.enter('ChangePartNext');
                }
                //-----------------------------------------------------------------------------------------
        }else {console.error(err)}
        });

      }else {
        await ctx.replyWithHTML(`–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!`,Markup.removeKeyboard(true));

        ctx.scene.reenter();
      }
    }
  });
} catch (err) {console.log(err)}
  return ChangePart
}

ChangeAutoPartNext1(){
  const ChangePartNext = new Scenes.BaseScene('ChangePartNext');
  try{
      ChangePartNext.on('text', async (ctx) => {
        ctx.session.–°hangeAutoPartComand = await ctx.message.text;
        if (ctx.session.–°hangeAutoPartComand == 'nameTitle' ||ctx.session.–°hangeAutoPartComand == 'type' ||ctx.session.–°hangeAutoPartComand == 'Article' ||ctx.session.–°hangeAutoPartComand == 'markAuto' ||ctx.session.–°hangeAutoPartComand == 'modelAuto' ||ctx.session.–°hangeAutoPartComand == 'price' ||ctx.session.–°hangeAutoPartComand == 'description'||ctx.session.–°hangeAutoPartComand == 'category'){
          ctx.replyWithHTML('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:',Markup.removeKeyboard(true));
          await ctx.scene.enter('ChangePartNext2');
        } else if (ctx.session.–°hangeAutoPartComand == 'image') {
            ctx.replyWithHTML('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:',Markup.removeKeyboard(true));
            await ctx.scene.enter('NewImage');
        } if (ctx.session.–°hangeAutoPartComand == '–û—Ç–º–µ–Ω–∞'){
          ctx.replyWithHTML('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:',Markup.removeKeyboard(true));
          await ctx.scene.enter('NewImage');
        } else {
          //ctx.replyWithHTML('–¢–∞–∫–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –Ω–µ—Ç —É —Ç–æ–≤–∞—Ä–∞!');
          ctx.scene.reenter();
        }
        });
      }catch (err) {console.log(err)}
        return ChangePartNext
      }

  ChangeAutoPartNext2(){
    const ChangePartNext2 = new Scenes.BaseScene('ChangePartNext2');
    try{
        ChangePartNext2.on('text', async (ctx) => {
          ctx.session.–°hangeAutoPartNewText = await ctx.message.text;
          mongoClient.connect(async function(error, mongo) {
            var db = mongo.db('NurmotorsAutopart');// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
            var autoPartsChara = db.collection('autoPartsChara');//–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ—É—Ü–∏–∏
            var autopart = db.collection('autopart');

            if (!error) {
          switch (ctx.session.–°hangeAutoPartComand) {
          case 'nameTitle':
          await autoPartsChara.updateOne({nameTitle:ctx.session.–°hangeAutoPart[0].trim() ,
            markAuto:ctx.session.–°hangeAutoPart[1].trim(),
            modelAuto:ctx.session.–°hangeAutoPart[2].trim()}, {$set: {nameTitle: ctx.session.–°hangeAutoPartNewText}});
          ctx.replyWithHTML(
`<b>–ó–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ -</b> ${ctx.session.–°hangeAutoPartComand}: ${ctx.session.–°hangeAutoPartNewText}
`);
          await ctx.scene.enter('adminPanel');
            break;
          case 'type':
          await autoPartsChara.updateOne({nameTitle:ctx.session.–°hangeAutoPart[0].trim() ,
            markAuto:ctx.session.–°hangeAutoPart[1].trim(),
            modelAuto:ctx.session.–°hangeAutoPart[2].trim()}, {$set: {type: ctx.session.–°hangeAutoPartNewText}});
          ctx.replyWithHTML(
`<b>–ó–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ -</b> ${ctx.session.–°hangeAutoPartComand}: ${ctx.session.–°hangeAutoPartNewText}
`);
          await ctx.scene.enter('adminPanel');
            break;
          case 'Article':
          await autoPartsChara.updateOne({nameTitle:ctx.session.–°hangeAutoPart[0].trim() ,
            markAuto:ctx.session.–°hangeAutoPart[1].trim(),
            modelAuto:ctx.session.–°hangeAutoPart[2].trim()}, {$set: {Article: ctx.session.–°hangeAutoPartNewText}});
          ctx.replyWithHTML(
`<b>–ó–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ -</b> ${ctx.session.–°hangeAutoPartComand}: ${ctx.session.–°hangeAutoPartNewText}
`);
          await ctx.scene.enter('adminPanel');
            break;
          case 'markAuto':
          await autoPartsChara.updateOne({nameTitle:ctx.session.–°hangeAutoPart[0].trim() ,
            markAuto:ctx.session.–°hangeAutoPart[1].trim(),
            modelAuto:ctx.session.–°hangeAutoPart[2].trim()}, {$set: {markAuto: ctx.session.–°hangeAutoPartNewText}});
          ctx.replyWithHTML(
`<b>–ó–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ -</b> ${ctx.session.–°hangeAutoPartComand}: ${ctx.session.–°hangeAutoPartNewText}
`);
          await ctx.scene.enter('adminPanel');
            break;
          case 'modelAuto':
          await autoPartsChara.updateOne({nameTitle:ctx.session.–°hangeAutoPart[0].trim() ,
            markAuto:ctx.session.–°hangeAutoPart[1].trim(),
            modelAuto:ctx.session.–°hangeAutoPart[2].trim()}, {$set: {modelAuto: ctx.session.–°hangeAutoPartNewText}});
          ctx.replyWithHTML(
`<b>–ó–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ -</b> ${ctx.session.–°hangeAutoPartComand}: ${ctx.session.–°hangeAutoPartNewText}
`);
          await ctx.scene.enter('adminPanel');
            break;
          case 'price':
          await autoPartsChara.updateOne({nameTitle:ctx.session.–°hangeAutoPart[0].trim() ,
            markAuto:ctx.session.–°hangeAutoPart[1].trim(),
            modelAuto:ctx.session.–°hangeAutoPart[2].trim()}, {$set: {price: Number(ctx.session.–°hangeAutoPartNewText)}});
          ctx.replyWithHTML(
`<b>–ó–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ -</b> ${ctx.session.–°hangeAutoPartComand}: ${ctx.session.–°hangeAutoPartNewText}
`);
          await ctx.scene.enter('adminPanel');
            break;
          case 'description':
          await autoPartsChara.updateOne({nameTitle:ctx.session.–°hangeAutoPart[0].trim() ,
            markAuto:ctx.session.–°hangeAutoPart[1].trim(),
            modelAuto:ctx.session.–°hangeAutoPart[2].trim()}, {$set: {description: ctx.session.–°hangeAutoPartNewText}});
          ctx.replyWithHTML(
`<b>–ó–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ -</b> ${ctx.session.–°hangeAutoPartComand}: ${ctx.session.–°hangeAutoPartNewText}
`);
          await ctx.scene.enter('adminPanel');
            break;
            case 'category':
            await autoPartsChara.updateOne({nameTitle:ctx.session.–°hangeAutoPart[0].trim() ,
              markAuto:ctx.session.–°hangeAutoPart[1].trim(),
              modelAuto:ctx.session.–°hangeAutoPart[2].trim()}, {$set: {category: ctx.session.–°hangeAutoPartNewText}});
            ctx.replyWithHTML(
  `<b>–ó–Ω–∞—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –±—ã–ª–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ -</b> ${ctx.session.–°hangeAutoPartComand}: ${ctx.session.–°hangeAutoPartNewText}
  `);
            await ctx.scene.enter('adminPanel');
            break;
          default:
            ctx.replyWithHTML("–¢–∞–∫–æ–≥–æ –ø—É–Ω–∫—Ç–∞ –Ω–µ—Ç —É —Ç–æ–≤–∞—Ä–∞!");
            await ctx.scene.enter('ChangePart');
          }
        } else {console.error(err)}
      });
    });
  }catch (err) {console.log(err)}
    return ChangePartNext2
  }

  NewImage(){
    const NewImage = new Scenes.BaseScene('NewImage');
    try{

      NewImage.on('message', async (ctx) => {
      const files = ctx.update.message.photo;
      try{var fileId = await files[2].file_id;} catch (err) {
      try{var fileId = await files[1].file_id;}catch (err) {
        var fileId = await files[0].file_id;}}

      let res = await axios.get(`https://api.telegram.org/bot5115089738:AAEisdocA0J2kouJ9OErJAASxhRwzugazf8/getFile?file_id=${fileId}`).then(token => { return token } )
      let file_path = await res.data.result.file_path;

      ctx.session.ResFile_unique_id = res.data.result.file_unique_id;

      var file = await fs.createWriteStream("../Diplom/public/img/details/"+res.data.result.file_unique_id + ".jpg");
      var request = await https.get(`https://api.telegram.org/file/bot5115089738:AAEisdocA0J2kouJ9OErJAASxhRwzugazf8/${file_path}`, function(response) {
       response.pipe(file);});

       mongoClient.connect(async function(error, mongo) {
         var db = mongo.db('NurmotorsAutopart');// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
         var autoPartsChara = db.collection('autoPartsChara');//–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ—É—Ü–∏–∏
         var autopart = db.collection('autopart');
         var checkAutoPartsChara = await autoPartsChara.findOne({nameTitle:ctx.session.–°hangeAutoPart[0].trim() ,
           markAuto:ctx.session.–°hangeAutoPart[1].trim(),
           modelAuto:ctx.session.–°hangeAutoPart[2].trim()});

       await autoPartsChara.updateOne({nameTitle:ctx.session.–°hangeAutoPart[0].trim() ,
         markAuto:ctx.session.–°hangeAutoPart[1].trim(),
         modelAuto:ctx.session.–°hangeAutoPart[2].trim()}, {$set: {image:`../Diplom/public/img/details/${ctx.session.ResFile_unique_id}.jpg`}});

         fs.unlinkSync(checkAutoPartsChara.image);
         await ctx.replyWithHTML(`–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!`);
         await ctx.scene.enter('adminPanel');
       });

     });

    }catch (err) {console.log(err)}
      return NewImage

  }
//=========================================================================
//=========================================================================

FindAProduct(){
  const FindProduct = new Scenes.BaseScene('FindProduct');
  try{
    FindProduct.enter(async (ctx) => {
    await ctx.replyWithHTML(
    `
<b>–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –µ–≥–æ –ø–æ–∏—Å–∫–∞</b>
–õ–∏–±–æ –Ω–∞–ø–∏—à–∏—Ç–µ <b>–û—Ç–º–µ–Ω–∞</b>.
    `,Markup.keyboard(['–û—Ç–º–µ–Ω–∞']).oneTime().resize());
  });

  FindProduct.on('text', async (ctx) => {
    ctx.session.FindProduct = await (ctx.message.text);
    if((ctx.message.text).toUpperCase() == "–û–¢–ú–ï–ù–ê") {
    ctx.replyWithHTML('–ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',Markup.removeKeyboard(true))
    await ctx.scene.enter('adminPanel');
  } else {
    mongoClient.connect(async function(error, mongo) {
      if (!error) {
          var db = mongo.db('NurmotorsAutopart');// –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–¥
          var autoPartsChara = db.collection('autoPartsChara');//–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–ª–ª–µ—É—Ü–∏–∏
          var autopart = db.collection('autopart');
          var SerchProduct = await autoPartsChara.findOne({Article:ctx.session.FindProduct});
          if(SerchProduct == null){
              await ctx.replyWithHTML('–¢–∞–∫–æ–π –∑–∞–ø—á–∞—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!',Markup.removeKeyboard(true));
              ctx.scene.reenter();
          } else{
          await ctx.replyWithPhoto({ source:SerchProduct.image},{ caption:
`
<i>–î–∞–Ω–Ω—ã–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –∑–∞–ø—á–∞—Ç–∏:</i>
<b>nameTitle:</b> ${SerchProduct.nameTitle}
<b>type:</b> ${SerchProduct.type}
<b>Article:</b> ${SerchProduct.Article}
<b>markAuto:</b> ${SerchProduct.markAuto}
<b>modelAuto:</b> ${SerchProduct.modelAuto}
<b>price:</b> ${SerchProduct.price}
<b>description:</b> ${SerchProduct.description}
`,parse_mode: 'HTML' });
await ctx.scene.enter('adminPanel');
}
        }else {console.error(err)}
      });
    }
});

  }catch (err) {console.log(err)}
  return FindProduct
}
//=========================================================================
//=========================================================================
//=========================================================================
//=========================================================================
}
module.exports = SceneGeneratorAdmin
